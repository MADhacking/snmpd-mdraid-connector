#!/bin/bash -u
# shellcheck disable=SC2034,SC2140

# Include snmpd-connector-lib.sh or die.
[[ ! -r ${SNMPD_CONNECTOR_LIB:=/usr/lib/snmpd-connector-lib.sh} ]] && \
    echo "Unable to find ${SNMPD_CONNECTOR_LIB}" && exit 1
# shellcheck disable=SC1090
source ${SNMPD_CONNECTOR_LIB}

# Helper function to get the device path from the devices array using a 1 based index
#
#	@in_param	$1 - The 1 based index of the device
#	@out_param	$2 - The path of this device
#
function get_device_path
{
	local AINDEX=$((${1} - 1))
	eval "$2"="${DEVICES[${AINDEX}]}"
}

# Helper function to make the filename for a device.
#
#	@in_param	$1 - The 1 based index of the device
#	@out_param	$2 - The device cache file path
#
function get_device_filename
{
	local DEVPATH DEVFILE
	
	# Make the device info filename
	get_device_path "${1}" DEVPATH
	
	DEVFILE=${DEVPATH##\/}
	DEVFILE=${CACHEDIR}/${DEVFILE//\//_}_mdinfo
	
	eval "$2"="${DEVFILE}"
}

# Helper function to get the string value of a field
#
#	@in_param	$1 - The 1 based index of the device
#	@in_param	$2 - The search string
#	@out_param	$3 - The string we found, if any.
#
function get_field
{
	local DFNAME VALUES L
	
	get_device_filename "${1}" DFNAME

	# Try to find the search string and get its line into an array.
	# shellcheck disable=SC2207
	VALUES=($(grep -i "${2}" < "${DFNAME}"))
	
	# Loop through the results looking for a ":", the value we want is next.
	for (( L=0; L<${#VALUES[@]}; L++ ))
	do
		if [[ ${VALUES[L]} = ":" ]]; then
			eval "$3"="${VALUES[L+1]}"
			return
		fi
	done 
	
	# If we got this far then there was no matching value, or it was blank.
	eval "$3"="N/A" 
}

# Helper function to get the string value of the rest of the line
#
#	@in_param	$1 - The 1 based index of the device
#	@in_param	$2 - The search string
#	@out_param	$3 - The string we found, if any.
#
function get_line
{
	local DFNAME VALUES L

	get_device_filename "${1}" DFNAME

	# Try to find the search string and get its line
    # shellcheck disable=SC2207
	VALUE=$(grep -i "${2}[[:space:]]*:" < "${DFNAME}" | head -1)

	if [[ $VALUE =~ ${2}[[:space:]]*:[[:space:]]*(.*) ]]; then
		eval "$3"=\""${BASH_REMATCH[1]}"\"
		return
	fi

	# If we got this far then there was no matching value
	eval "$3"="N/A"
}

# Function to send the index value
#
#	@in_param	$1 - The OID to send before this data
#	@in_param	$2 - The index value
#
function send_index
{
	# If the index is in range...
	if (( $# > 1 )); then
		if (( ${2} <= ${#DEVICES[@]} )); then
			# Send the OID and the index number.
			send_integer "${1}" "${2}"
			return
		fi
	fi

	# Send the OID and NONE.
	send_none "${1}"
}

# Function to send the device path
#
#	@in_param	$1 - The OID to send before this data
#	@in_param	$2 - The index value
#
function send_device_path
{
	local DEVPATH 
	get_device_path "${2}" DEVPATH
	send_string "${1}" "${DEVPATH}"
}

# Function to send array info (string) - called: send_device_info_str OID DEVICE "Info String"
#
#	@in_param	$1 - The STRING to search for
#	@in_param	$2 - The OID to send before this data
#	@in_param	$3 - The index value
#
function send_device_info_str
{
	local VALUE
	
	get_field "${3}" "${1}" VALUE
	send_string "${2}" "${VALUE}"
}

# Function to send array health (string) - called: send_device_health OID DEVICE
#
#	@in_param	$1 - The OID to send before this data
#	@in_param	$2 - The index value
#
function send_device_health
{
	local VALUE
	
	get_line "${2}" "State" VALUE    					# e.g. "clean " or "clean, degraded "
	VALUE="${VALUE%"${VALUE##*[![:space:]]}"}"
	if [[ "${VALUE}" =~ .*degraded.* ]]; then
		send_boolean "${1}" "F"
		return
	fi

	VALUE="${VALUE%,*}"   							# e.g. "active, checking"
	
	if [[ "${VALUE}" == "active" || "${VALUE}" == "active-idle" || "${VALUE}" == "clean" ]]; then
	    send_boolean "${1}" "T"
	else
	    send_boolean "${1}" "F"
	fi
}

# Function to boolean indicating array has failed components - called: send_device_has_failed OID DEVICE
#
#	@in_param	$1 - The OID to send before this data
#	@in_param	$2 - The index value
#
function send_device_has_failed
{
	local VALUE

	get_field "${2}" "Failed Devices" VALUE
	if [[ "${VALUE}" == [1-9]* ]]; then
	    send_boolean "${1}" "T"
	else
	    send_boolean "${1}" "F"
	fi
}

# Function to boolean indicating array has available spares - called: send_device_has_spares OID DEVICE
#
#	@in_param	$1 - The OID to send before this data
#	@in_param	$2 - The index value
#
function send_device_has_spares
{
	local VALUE

	get_field "${2}" "Spare Devices" VALUE
	if [[ "${VALUE}" == [1-9]* ]]; then
	    send_boolean "${1}" "T"
	else
	    send_boolean "${1}" "F"
	fi
}

# Function to send array info (gauge) - called: send_device_info_gauge OID DEVICE "Info String"
#
#	@in_param	$1 - The STRING to search for
#	@in_param	$2 - The OID to send before this data
#	@in_param	$3 - The index value
#
function send_device_info_gauge
{
	local VALUE
	
	get_field "${3}" "${1}" VALUE
	send_gauge "${2}" "${VALUE}"
}

# Function to get the next index value
#
#	@in_param	$1 - The (optional) starting index value
#	@echo		   - The new index or nothing if out of range
#
function get_next_index
{
	# If we still have more than one element in the request array then something
	# is wrong so log an error and return 0.
	if (( $# > 1 )); then
		error_echo "get_next_index: called with $# request array elements!"
		return
	fi
	
	# If we were passed a starting index...
	if (( $# > 0 )); then
		# If the passed index is less than the number of devices then return it +1,
		# otherwise return 0 to indicate that the index would be out of range. 
		if (( ${1} < ${#DEVICES[@]} )); then
			RETVAL=$(( ${1} + 1 ))
			debug_echo "next index is in range, returning ${RETVAL}"
			echo "${RETVAL}"
			return
		else
			debug_echo "next index would be out of range, returning zero"
			return
		fi 
	fi	
	
	# If we got this far then we were not passed an index so return the first
	# available index.
	debug_echo "no index supplied, returning first index"
	echo "1"
	return
}

# Init local vars
CMDNAME=$(basename "${0}")
CONFIG="${CONFIG:-/etc/snmpd-mdraid-connector}"
DEVICES=""
CACHEDIR=""
DEBUG=""

# Read the config file if we can
# shellcheck disable=SC1090
source "${CONFIG}" || die "Unable to read configuration file [${CONFIG}]"

# Check for config values.
[[ -z "${DEVICES}" ]] && die "No DEVICES configured in ${CONFIG}"
[[ -z "${CACHEDIR}" ]] && die "No CACHEDIR configured in ${CONFIG}"
if [[ ! -d "${CACHEDIR}" ]]; then
     mkdir -p "${CACHEDIR}" || die "Cache directory [${CACHEDIR}] does not exist and could not be created"
 fi
[[ ! -r "${CACHEDIR}" ]] && die "Cache directory [${CACHEDIR}] is not readable by $(whoami)"

# Configure base address
BASE_MIB="MD-RAID-MIB::mdRaid"

# Declare the tables
RTABLE[2]="#ETABLE"
	ETABLE[1]="#FTABLE"
		FTABLE_INDEX="get_next_index"							# Internal function to get next index
		FTABLE[1]="send_index"									# It is an index request.
		FTABLE[2]="send_device_path" 							# It is for the mapped device path.
		FTABLE[3]="send_device_info_str 'Version'" 				# It is for the raid version.
		FTABLE[4]="send_device_info_str 'UUID'" 				# It is for the raid UUID.
		FTABLE[5]="send_device_info_str 'Raid Level'"			# It is for the raid level.
		FTABLE[6]="send_device_info_str 'Layout'" 				# It is for the raid layout.
		FTABLE[7]="send_device_info_str 'Chunk Size'"			# It is for the raid chunk size.
		FTABLE[8]="send_device_info_str 'Array Size'" 			# It is for the raid array size.
		FTABLE[9]="send_device_info_str 'Used Dev Size'"		# It is for the raid used device size.
		FTABLE[10]="send_device_health"							# It is for the overall array health state.
		FTABLE[11]="send_device_has_failed"						# Boolean indicating failed components.
		FTABLE[12]="send_device_has_spares"						# Boolean indicating available spares.
		FTABLE[13]="send_device_info_gauge 'Total Devices'"		# It is for the total number of devices in the array.
		FTABLE[14]="send_device_info_gauge 'Active Devices'"	# It is for the number of active devices in the array.
		FTABLE[15]="send_device_info_gauge 'Working Devices'"	# It is for the number of working devices in the array.
		FTABLE[16]="send_device_info_gauge 'Failed Devices'"	# It is for the number of failed devices in the array.
		FTABLE[17]="send_device_info_gauge 'Spare Devices'"		# It is for the number of spare devices in the array.
		FTABLE[18]="send_device_info_gauge 'RAID Devices'"		# It is for the number of RAID devices in the array.

# Start the loop
the_loop
